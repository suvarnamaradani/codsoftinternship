class ContactBook:
    def __init__(self):
        self.contacts = []
    def add_contact(self, name, phone, email, address):
        contact = {
            'name': name,
            'phone': phone,
            'email': email,
            'address': address
        }
        self.contacts.append(contact)
        print(f"Contact {name} added successfully.\n")
    def view_contacts(self):
        if not self.contacts:
            print("No contacts found.")
        else:
            print("\nContact List:")
            for contact in self.contacts:
                print(f"Name: {contact['name']}, Phone: {contact['phone']}")
        print()
    def search_contact(self, search_term):
        found_contacts = [contact for contact in self.contacts if contact['name'] == search_term or contact['phone'] == search_term]
        if found_contacts:
            for contact in found_contacts:
                print(f"\nName: {contact['name']}")
                print(f"Phone: {contact['phone']}")
                print(f"Email: {contact['email']}")
                print(f"Address: {contact['address']}\n")
        else:
            print(f"No contact found with {search_term}.\n")
    def update_contact(self, search_term):
        for contact in self.contacts:
            if contact['name'] == search_term or contact['phone'] == search_term:
                print(f"\nCurrent details of {contact['name']}:")
                print(f"Phone: {contact['phone']}, Email: {contact['email']}, Address: {contact['address']}")
                new_name = input("Enter new name (leave blank to keep the same): ") or contact['name']
                new_phone = input("Enter new phone (leave blank to keep the same): ") or contact['phone']
                new_email = input("Enter new email (leave blank to keep the same): ") or contact['email']
                new_address = input("Enter new address (leave blank to keep the same): ") or contact['address']
                contact['name'], contact['phone'], contact['email'], contact['address'] = new_name, new_phone, new_email, new_address
                print(f"Contact {new_name} updated successfully.\n")
                return
        
        print(f"No contact found with {search_term}.\n")
    def delete_contact(self, search_term):
        for contact in self.contacts:
            if contact['name'] == search_term or contact['phone'] == search_term:
                self.contacts.remove(contact)
                print(f"Contact {contact['name']} deleted successfully.\n")
                return
        print(f"No contact found with {search_term}.\n")
def contact_book_interface():
    book = ContactBook()
    while True:
        print("\n--- Contact Book Menu ---")
        print("1. Add Contact")
        print("2. View Contact List")
        print("3. Search Contact")
        print("4. Update Contact")
        print("5. Delete Contact")
        print("6. Exit")
        
        choice = input("Choose an option: ")

        if choice == '1':
            name = input("Enter name: ")
            phone = input("Enter phone: ")
            email = input("Enter email: ")
            address = input("Enter address: ")
            book.add_contact(name, phone, email, address)
        
        elif choice == '2':
            book.view_contacts()

        elif choice == '3':
            search_term = input("Enter name or phone number to search: ")
            book.search_contact(search_term)

        elif choice == '4':
            search_term = input("Enter name or phone number of the contact to update: ")
            book.update_contact(search_term)

        elif choice == '5':
            search_term = input("Enter name or phone number of the contact to delete: ")
            book.delete_contact(search_term)
  
        elif choice == '6':
            print("Exiting the Contact Book. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

# Run the contact book interface
contact_book_interface()
